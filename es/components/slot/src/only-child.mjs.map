{"version":3,"file":"only-child.mjs","sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  Comment,\n  Fragment,\n  Text,\n  cloneVNode,\n  defineComponent,\n  inject,\n  withDirectives,\n} from 'vue'\nimport { NOOP, isObject } from '@vue/shared'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { Ref, VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    //给目标ref设置 默认插槽中的dom\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n        return null\n      }\n\n      const firstLegitNode = findFirstLegitChild(defaultSlot)\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(node: VNode[] | undefined): VNode | null {\n  if (!node) return null\n  const children = node as VNode[]\n  for (const child of children) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n        case 'svg':\n          return wrapTextContent(child)\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return child\n      }\n    }\n    return wrapTextContent(child)\n  }\n  return null\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  const ns = useNamespace('only-child')\n  return <span class={ns.e('content')}>{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"],"names":["NAME","OnlyChild","defineComponent","name","slots","attrs","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","defaultSlot","length","debugWarn","findFirstLegitChild","children","child","Text","wrapTextContent","_createVNode"],"mappings":";;;;;;;;AAmBA,MAAMA,IAAI,GAAG,aAAb,CAAA;AAEaC,MAAAA,SAAS,GAAGC,eAAe,CAAC;AACvCC,EAAAA,IAAI,EAAEH,IADiC;;IAElC,KAAA;IAAMI,KAAF;AAASC,GAAAA,EAAAA;AAAT,IAAkB,IAAA,EAAA,CAAA;AACzB,IAAA,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,yBAAD,CAAlC,CADyB;;IAGzB,OAAMC,MAAAA;AAGN,MAAA,IAAA,GAAa,CAAA;AACX,MAAA,MAAMC,WAAW,GAAGN,CAAAA,GAAAA,GAAA,KAAA,CAAA,YAApB,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA;AACA,MAAA,IAAI,CAACM,WAAL;;AAEA,MAAA,IAAIA,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,SAAS,CAACZ,IAAD,EAAO,sCAAP,CAAT,CAAA;AACA,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;;AAED,MAAA,IAAA,CAAA,cAAoB,EAAA;;QAChB;AACFY,OAAAA;AACA,MAAA,OAAA,cAAA,CAAA,UAAA,CAAA,cAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,CAAA;AACD,KAAA,CAAA;;AAED,CAAA,EAAA;SAfF,mBAAA,CAAA,IAAA,EAAA;AAmBD,EAAA,IAAA,CAAA,IAAA;;AA3BsC,EAAlC,MAAA,QAAA,GAAA,IAAA,CAAA;;AA8BP,IAASC,IAAAA,QAAAA,CAAAA,KAAAA,CAAAA,EAAAA;AACP,MAAI,QAAO,KAAA,CAAO,IAAP;QACLC,KAAAA,OAAN;;AACA,QAAWC,KAAAA,IAAAA,CAAX;AACE,QAAA,KAAA,KAAA;AACJ,UAAA,OAAA,eAAA,CAAA,KAAA,CAAA,CAAA;AACA,QAAA,KAAA,QAAA;AACA,UAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA;AACA,QAAA;AACI,UAAY,OAACA,KAAD,CAAZ;OACUA;AACN,KAAA;AACE,IAAA,OAAA,eAAA,CAAA,KAAA,CAAA,CAAA;;AACF,EAAA,OAAA,IAAKC,CAAL;AACA,CAAA;wBACSC,CAAAA,CAAAA,EAAAA;;AACT,EAAA,OAAAC,WAAA,CAAA,MAAA,EAAA;AACE,IAAA,OAAA,EAAA,EAAA,CAAA,CAAOL,CAAmB,SAAA,CAAA;;AAC5B;;;;"}